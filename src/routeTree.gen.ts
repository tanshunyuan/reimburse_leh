/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ReportIndexImport } from './routes/report/index'
import { Route as ExpensesCreateImport } from './routes/expenses/create'
import { Route as ExpensesExpenseIdIndexImport } from './routes/expenses/$expenseId/index'

// Create/Update Routes

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ReportIndexRoute = ReportIndexImport.update({
  path: '/report/',
  getParentRoute: () => rootRoute,
} as any)

const ExpensesCreateRoute = ExpensesCreateImport.update({
  path: '/expenses/create',
  getParentRoute: () => rootRoute,
} as any)

const ExpensesExpenseIdIndexRoute = ExpensesExpenseIdIndexImport.update({
  path: '/expenses/$expenseId/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/expenses/create': {
      id: '/expenses/create'
      path: '/expenses/create'
      fullPath: '/expenses/create'
      preLoaderRoute: typeof ExpensesCreateImport
      parentRoute: typeof rootRoute
    }
    '/report/': {
      id: '/report/'
      path: '/report'
      fullPath: '/report'
      preLoaderRoute: typeof ReportIndexImport
      parentRoute: typeof rootRoute
    }
    '/expenses/$expenseId/': {
      id: '/expenses/$expenseId/'
      path: '/expenses/$expenseId'
      fullPath: '/expenses/$expenseId'
      preLoaderRoute: typeof ExpensesExpenseIdIndexImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/expenses/create': typeof ExpensesCreateRoute
  '/report': typeof ReportIndexRoute
  '/expenses/$expenseId': typeof ExpensesExpenseIdIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/expenses/create': typeof ExpensesCreateRoute
  '/report': typeof ReportIndexRoute
  '/expenses/$expenseId': typeof ExpensesExpenseIdIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/expenses/create': typeof ExpensesCreateRoute
  '/report/': typeof ReportIndexRoute
  '/expenses/$expenseId/': typeof ExpensesExpenseIdIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/expenses/create' | '/report' | '/expenses/$expenseId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/expenses/create' | '/report' | '/expenses/$expenseId'
  id:
    | '__root__'
    | '/'
    | '/expenses/create'
    | '/report/'
    | '/expenses/$expenseId/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ExpensesCreateRoute: typeof ExpensesCreateRoute
  ReportIndexRoute: typeof ReportIndexRoute
  ExpensesExpenseIdIndexRoute: typeof ExpensesExpenseIdIndexRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ExpensesCreateRoute: ExpensesCreateRoute,
  ReportIndexRoute: ReportIndexRoute,
  ExpensesExpenseIdIndexRoute: ExpensesExpenseIdIndexRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/expenses/create",
        "/report/",
        "/expenses/$expenseId/"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/expenses/create": {
      "filePath": "expenses/create.tsx"
    },
    "/report/": {
      "filePath": "report/index.tsx"
    },
    "/expenses/$expenseId/": {
      "filePath": "expenses/$expenseId/index.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
